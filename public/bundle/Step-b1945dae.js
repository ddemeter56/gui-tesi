
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { a3 as notification, w as writable, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, A as validate_store, _ as te, B as component_subscribe, v as validate_slots, H as createEventDispatcher, q as setContext, W as globals, j as element, l as text, k as add_location, e as insert_dev, o as append_dev, G as listen_dev, p as set_data_dev, h as detach_dev, b as space, C as empty, x as attr_dev, u as update_slot, Z as prop_dev, t as transition_in, f as transition_out, a0 as run_all, y as getContext, a4 as fly, Q as add_render_callback, a5 as create_bidirectional_transition, F as toggle_class, D as group_outros, E as check_outros } from './main-896ad822.js';

function send(message, type = 'default', timeout) {
  notification.set({ type, message, timeout });
}

function show(type, msg, timeout) {
  send(msg, type, timeout);
}

function createCount() {
	const { subscribe } = writable(null);

	return {
		subscribe,
		showNotify: function(type,message){
			show(type,message,6000);
		}
	};
}

const notifyStore = createCount();

/* src\components\Wizard\Wizard.svelte generated by Svelte v3.29.7 */

const { console: console_1 } = globals;
const file = "src\\components\\Wizard\\Wizard.svelte";

// (104:0) {#if nextButtonDisabled}
function create_if_block(ctx) {
	let button;
	let t_value = /*$_*/ ctx[3](`wizard.doneButton`) + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			add_location(button, file, 104, 1, 2299);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*wizardDone*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$_*/ 8 && t_value !== (t_value = /*$_*/ ctx[3](`wizard.doneButton`) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(104:0) {#if nextButtonDisabled}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div0;
	let t0;
	let t1;
	let div1;
	let t2;
	let button0;
	let t3_value = /*$_*/ ctx[3](`wizard.prevButton`) + "";
	let t3;
	let t4;
	let button1;
	let t5_value = /*$_*/ ctx[3](`wizard.nextButton`) + "";
	let t5;
	let t6;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let if_block = /*nextButtonDisabled*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t2 = space();
			button0 = element("button");
			t3 = text(t3_value);
			t4 = space();
			button1 = element("button");
			t5 = text(t5_value);
			t6 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(div0, "class", "wizardTitle svelte-au1kpx");
			add_location(div0, file, 96, 0, 1984);
			attr_dev(div1, "class", "stepContainer");
			add_location(div1, file, 97, 0, 2024);
			button0.disabled = /*prevButtonDisabled*/ ctx[2];
			add_location(button0, file, 101, 0, 2080);
			button1.disabled = /*nextButtonDisabled*/ ctx[1];
			add_location(button1, file, 102, 0, 2178);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			insert_dev(target, t2, anchor);
			insert_dev(target, button0, anchor);
			append_dev(button0, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, button1, anchor);
			append_dev(button1, t5);
			insert_dev(target, t6, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*stepPrevious*/ ctx[5], false, false, false),
					listen_dev(button1, "click", /*stepNext*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if ((!current || dirty & /*$_*/ 8) && t3_value !== (t3_value = /*$_*/ ctx[3](`wizard.prevButton`) + "")) set_data_dev(t3, t3_value);

			if (!current || dirty & /*prevButtonDisabled*/ 4) {
				prop_dev(button0, "disabled", /*prevButtonDisabled*/ ctx[2]);
			}

			if ((!current || dirty & /*$_*/ 8) && t5_value !== (t5_value = /*$_*/ ctx[3](`wizard.nextButton`) + "")) set_data_dev(t5, t5_value);

			if (!current || dirty & /*nextButtonDisabled*/ 2) {
				prop_dev(button1, "disabled", /*nextButtonDisabled*/ ctx[1]);
			}

			if (/*nextButtonDisabled*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(button0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(button1);
			if (detaching) detach_dev(t6);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const key = { name: "wizard-context" };

function instance($$self, $$props, $$invalidate) {
	let $_;
	validate_store(te, "_");
	component_subscribe($$self, te, $$value => $$invalidate(3, $_ = $$value));
	let { $$slots: slots$1 = {}, $$scope } = $$props;
	validate_slots("Wizard", slots$1, ['default']);
	const dispatch = createEventDispatcher();
	let { title = "Wizard title" } = $$props;
	const slots = [];
	let activeIndex = 0;
	let slotLength;
	let activeSlot = writable(null);
	let nextButtonDisabled = false;
	let prevButtonDisabled = true;

	function wizardDone() {
		dispatch("wizardDone", { text: "Wizard done" });
	}

	setContext(key, {
		addSlot: slot => {
			slots.push(slot);
			slotLength = slots.length;
		},
		activeNow: () => {
			const i = slots.find(a => a.active === true);
			activeSlot.set(i);
			activeIndex = slots.findIndex(slot => slot == i);
		},
		setActiveIndex: i => {
			activeIndex = i;

			i === 0
			? $$invalidate(2, prevButtonDisabled = true)
			: $$invalidate(2, prevButtonDisabled = false);

			i === slotLength - 1
			? $$invalidate(1, nextButtonDisabled = true)
			: $$invalidate(1, nextButtonDisabled = false);
		},
		nextButtonDisabled,
		prevButtonDisabled,
		slots,
		activeSlot
	});

	function updateActiveSlot(toIndex) {
		activeSlot.set(slots[toIndex]);
	}

	function stepPrevious() {
		console.log(activeIndex);

		if (activeIndex == 1) {
			$$invalidate(2, prevButtonDisabled = true);
		}

		if (activeIndex > 0) {
			activeIndex = activeIndex - 1;
			updateActiveSlot(activeIndex);
			$$invalidate(1, nextButtonDisabled = false);
		}
	}

	function stepNext() {
		slots[activeIndex].done = true;

		if (activeIndex + 2 == slotLength) {
			$$invalidate(1, nextButtonDisabled = true);
		}

		if (activeIndex + 1 !== slotLength) {
			$$invalidate(2, prevButtonDisabled = false);
			activeIndex = activeIndex + 1;
			slots[activeIndex].current = true;
			updateActiveSlot(activeIndex);
		}
	}

	const writable_props = ["title"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Wizard> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		key,
		_: te,
		setContext,
		writable,
		createEventDispatcher,
		dispatch,
		title,
		slots,
		activeIndex,
		slotLength,
		activeSlot,
		nextButtonDisabled,
		prevButtonDisabled,
		wizardDone,
		updateActiveSlot,
		stepPrevious,
		stepNext,
		$_
	});

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("activeIndex" in $$props) activeIndex = $$props.activeIndex;
		if ("slotLength" in $$props) slotLength = $$props.slotLength;
		if ("activeSlot" in $$props) activeSlot = $$props.activeSlot;
		if ("nextButtonDisabled" in $$props) $$invalidate(1, nextButtonDisabled = $$props.nextButtonDisabled);
		if ("prevButtonDisabled" in $$props) $$invalidate(2, prevButtonDisabled = $$props.prevButtonDisabled);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		title,
		nextButtonDisabled,
		prevButtonDisabled,
		$_,
		wizardDone,
		stepPrevious,
		stepNext,
		$$scope,
		slots$1
	];
}

class Wizard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Wizard",
			options,
			id: create_fragment.name
		});
	}

	get title() {
		throw new Error("<Wizard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Wizard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\Wizard\Step.svelte generated by Svelte v3.29.7 */
const file$1 = "src\\components\\Wizard\\Step.svelte";

// (137:3) {#if $activeSlot === slot}
function create_if_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*desc*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*desc*/ 2) set_data_dev(t, /*desc*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(137:3) {#if $activeSlot === slot}",
		ctx
	});

	return block;
}

// (143:2) {#if $activeSlot === slot}
function create_if_block$1(ctx) {
	let div;
	let div_transition;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div, "class", "slotStyle scrollable svelte-183n95");
			add_location(div, file$1, 143, 3, 2999);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fly, { x: 1000, duration: 500 }, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, fly, { x: 1000, duration: 500 }, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(143:2) {#if $activeSlot === slot}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div4;
	let div2;
	let div0;
	let t0;
	let t1;
	let img;
	let t2;
	let div1;
	let t3;
	let div3;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*$activeSlot*/ ctx[4] === /*slot*/ ctx[3] && create_if_block_1(ctx);
	let if_block1 = /*$activeSlot*/ ctx[4] === /*slot*/ ctx[3] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			img = element("img");
			t2 = space();
			div1 = element("div");
			if (if_block0) if_block0.c();
			t3 = space();
			div3 = element("div");
			if (if_block1) if_block1.c();
			attr_dev(img, "url", /*imageUrl*/ ctx[2]);
			attr_dev(img, "alt", "img");
			add_location(img, file$1, 133, 3, 2797);
			attr_dev(div0, "class", "titleAndIcon svelte-183n95");
			add_location(div0, file$1, 131, 2, 2754);
			attr_dev(div1, "class", "description svelte-183n95");
			add_location(div1, file$1, 135, 2, 2843);
			attr_dev(div2, "class", "titles svelte-183n95");
			toggle_class(div2, "activeStep", /*$activeSlot*/ ctx[4] === /*slot*/ ctx[3]);
			toggle_class(div2, "done", /*slot*/ ctx[3].done);
			toggle_class(div2, "current", /*slot*/ ctx[3].current);
			add_location(div2, file$1, 130, 1, 2616);
			attr_dev(div3, "class", "content svelte-183n95");
			add_location(div3, file$1, 141, 1, 2943);
			attr_dev(div4, "class", "stepContainer svelte-183n95");
			add_location(div4, file$1, 129, 0, 2586);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div2);
			append_dev(div2, div0);
			append_dev(div0, t0);
			append_dev(div0, t1);
			append_dev(div0, img);
			append_dev(div2, t2);
			append_dev(div2, div1);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div4, t3);
			append_dev(div4, div3);
			if (if_block1) if_block1.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div2, "click", /*switchStep*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (!current || dirty & /*imageUrl*/ 4) {
				attr_dev(img, "url", /*imageUrl*/ ctx[2]);
			}

			if (/*$activeSlot*/ ctx[4] === /*slot*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div1, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$activeSlot, slot*/ 24) {
				toggle_class(div2, "activeStep", /*$activeSlot*/ ctx[4] === /*slot*/ ctx[3]);
			}

			if (dirty & /*slot*/ 8) {
				toggle_class(div2, "done", /*slot*/ ctx[3].done);
			}

			if (dirty & /*slot*/ 8) {
				toggle_class(div2, "current", /*slot*/ ctx[3].current);
			}

			if (/*$activeSlot*/ ctx[4] === /*slot*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$activeSlot, slot*/ 24) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div3, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $activeSlot;
	let { $$slots: slots$1 = {}, $$scope } = $$props;
	validate_slots("Step", slots$1, ['default']);
	let { title } = $$props;
	let { desc = "" } = $$props;
	let { active = false } = $$props;
	let { done = false } = $$props;
	let { current = false } = $$props;
	let { imageUrl } = $$props;
	const { addSlot, slots, activeSlot, activeNow, setActiveIndex } = getContext(key);
	validate_store(activeSlot, "activeSlot");
	component_subscribe($$self, activeSlot, value => $$invalidate(4, $activeSlot = value));
	const slot = { name: title, desc, active, done, current };
	addSlot(slot);
	activeNow();

	function switchStep() {
		if (slot.done || slot.current) {
			activeSlot.set(slot);
			setActiveIndex(slots.findIndex(s => s == slot));
		}
	}

	const writable_props = ["title", "desc", "active", "done", "current", "imageUrl"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Step> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("desc" in $$props) $$invalidate(1, desc = $$props.desc);
		if ("active" in $$props) $$invalidate(7, active = $$props.active);
		if ("done" in $$props) $$invalidate(8, done = $$props.done);
		if ("current" in $$props) $$invalidate(9, current = $$props.current);
		if ("imageUrl" in $$props) $$invalidate(2, imageUrl = $$props.imageUrl);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		getContext,
		key,
		fly,
		title,
		desc,
		active,
		done,
		current,
		imageUrl,
		addSlot,
		slots,
		activeSlot,
		activeNow,
		setActiveIndex,
		slot,
		switchStep,
		$activeSlot
	});

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("desc" in $$props) $$invalidate(1, desc = $$props.desc);
		if ("active" in $$props) $$invalidate(7, active = $$props.active);
		if ("done" in $$props) $$invalidate(8, done = $$props.done);
		if ("current" in $$props) $$invalidate(9, current = $$props.current);
		if ("imageUrl" in $$props) $$invalidate(2, imageUrl = $$props.imageUrl);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$activeSlot, slot*/ 24) {
			 $activeSlot !== slot && slot.done
			? $$invalidate(3, slot.done = true, slot)
			: "";
		}

		if ($$self.$$.dirty & /*$activeSlot, slot*/ 24) {
			 $activeSlot !== slot && slot.current
			? $$invalidate(3, slot.current = true, slot)
			: "";
		}
	};

	return [
		title,
		desc,
		imageUrl,
		slot,
		$activeSlot,
		activeSlot,
		switchStep,
		active,
		done,
		current,
		$$scope,
		slots$1
	];
}

class Step extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			title: 0,
			desc: 1,
			active: 7,
			done: 8,
			current: 9,
			imageUrl: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Step",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
			console.warn("<Step> was created without expected prop 'title'");
		}

		if (/*imageUrl*/ ctx[2] === undefined && !("imageUrl" in props)) {
			console.warn("<Step> was created without expected prop 'imageUrl'");
		}
	}

	get title() {
		throw new Error("<Step>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Step>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get desc() {
		throw new Error("<Step>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set desc(value) {
		throw new Error("<Step>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<Step>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<Step>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get done() {
		throw new Error("<Step>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set done(value) {
		throw new Error("<Step>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get current() {
		throw new Error("<Step>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set current(value) {
		throw new Error("<Step>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imageUrl() {
		throw new Error("<Step>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageUrl(value) {
		throw new Error("<Step>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Step as S, Wizard as W, notifyStore as n };
//# sourceMappingURL=Step-b1945dae.js.map
